{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"This is the documentation for the API made with nodejs 12/03/2022 mkdocs hosted on gh pages: https://omnislashh.github.io/LPCodesiApiRestDoc/ description: //API REST avec express Administrer des joueurs et des \u00e9quipes repository: https://github.com/omnislashh/ser-cli-app.git outils: Windows10, Wamp, nodejs, expressjs, postman utilisation: CRUD endpoints uri: /persons /person/:id /data/:options /personcreation /personupdate /persondelete endpoints exemples: http://localhost:3000/personupdate?id=35&name=updated&prenom=prenomUp&date=1980-05-06 verbes http et justifications: Verbes utilis\u00e9s: PUT PATCH codes utilis\u00e9s: 201... architecture: MVC - client/server en local arborescence: design pattern: singleton pour se connecter une seule fois choix design pattern pour Data Access Object: table data getaway design pattern vs active record avantage table data getaway: separe la couche metier de la couche persistante //class Dao implemente le Dal (Data Access Layer) //js pas de classe abstraite // classe abstraite // empecher la creation d'objet + lister les methodes qui doivent etre implant\u00e9e + declencher des erreurs // en js // 1 - code heroes // 2 - babel - pas en prod // 3 - use typescript - bdd: jwt: ajout d'une couche de securit\u00e9/connexion user avec le bearer token // https://www.wawasensei.dev/tuto/tuto-authentification-refresh-json-web-token-en-nodejs-avec-express //stateless: sans stocker d'infos user //statefull: avec stockage de session //connexion s'appuie sur 2 tokens: l'un qui repose sur l'autre //deconnexion: lorsque le premier p\u00e9rime, le second est invalide, pas besoin de faire un logout //\u00e0 voir: refresh de token","title":"About"}]}