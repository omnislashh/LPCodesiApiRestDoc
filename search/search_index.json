{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"This is the documentation for the API made with nodejs - LPCODESI 12/03/2022 mkdocs hosted on gh pages: https://omnislashh.github.io/LPCodesiApiRestDoc/ to update, after pushing /docs mkdocs gh-deploy Author - Elie Application Programming Interface RESTful definition https://www.redhat.com/en/topics/api/what-is-a-rest-api further reading https://www.redhat.com/en/topics/api/what-are-application-programming-interfaces article en fran\u00e7ais https://practicalprogramming.fr/api-rest un exemple : l'API de wikipedia https://www.mediawiki.org/wiki/API:Main_page cours complet https://openclassrooms.com/fr/courses/6573181-adoptez-les-api-rest-pour-vos-projets-web/6817216-identifiez-les-avantages-d-une-api-rest autre article avec petit historique et contexte https://www.data-transitionnumerique.com/api-rest/ Une synth\u00e8se des concepts cl\u00e9s : - client/server separation - stateless pas de sauvegarde de queries server - cache - syst\u00e8me en couche - endpoints accessibles - s\u00e9curis\u00e9 - http protocol - interface uniforme Description: //API REST avec expressjs Administrer des joueurs et des \u00e9quipes repository: https://github.com/omnislashh/ser-cli-app.git outils: Windows10, Wamp, nodejs, expressjs, postman utilisation: CRUD - CREATE, READ, UPDATE, DELETE routing - endpoints uri: /persons /person/:id /data/:options /personcreation /personupdate /persondelete Endpoints exemples: personnes: GET http://localhost:3000/persons GET http://localhost:3000/persons/1 GET http://localhost:3000/personsfree PATCH http://localhost:3000/personupdate?id=35&name=updated&prenom=prenomUp&date=1980-05-06 PATCH http://localhost:3000/personupdate?id=2&name=updatedJustName PATCH http://localhost:3000/personupdate?id=2&name=&prenom=updatedJustPrenom PATCH http://localhost:3000/personupdate?id=2&name=&prenom=&date=1980-08-06 PUT http://localhost:3000/personcreation?name=Casillas&prenom=Iker&date=1981-05-20 DELETE http://localhost:3000/persondelete?id=6 departements: GET http://localhost:3000/departements GET http://localhost:3000/departement/1 GET http://localhost:3000/departementsfree PUT http://localhost:3000/departementcreation?nom=France PATCH http://localhost:3000/departementupdate?id=3&nom=Olympique-de-Marseille DELETE http://localhost:3000/departementdelete?id=3 Verbes http utilis\u00e9s et justifications : PUT plus naturel pour les cr\u00e9ations et mises \u00e0 jour compl\u00e8tes (URI ressource ressource cr\u00e9\u00e9e = URI de la requ\u00eate PUT) PATCH pour les mises \u00e0 jour partielles POST en dernier recours (contrainte \u00e0 la cr\u00e9ation d'une ressource li\u00e9e avec Header Location) codes utilis\u00e9s: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status Architecture: MVC - client/server en local Arborescence: Design pattern: singleton pour se connecter une seule fois choix design pattern pour Data Access Object: table data getaway design pattern vs active record avantage table data getaway: separe la couche metier de la couche persistante Notes additionnelles : // la class Dao implemente le Dal (Data Access Layer) // en javascript (syntaxe : CommonJS) : pas de classe abstraite // classe abstraite definition : // empecher la creation d'objet + lister les methodes qui doivent etre implant\u00e9e + declencher des erreurs // solutions : // 1 - code heroes https://www.codeheroes.fr/2017/11/08/js-classes-abstraites-et-interfaces/ // 2 - babel - pas conseill\u00e9 en prod // 3 - use typescript - bdd: // scripts sql in /data/BDD JWT: POST http://localhost:3000/api/login GET http://localhost:3000/api/me ajout d'une couche de securit\u00e9/connexion user avec le bearer token https://www.wawasensei.dev/tuto/tuto-authentification-refresh-json-web-token-en-nodejs-avec-express // stateless: sans stocker d'infos user // statefull: avec stockage de session // connexion s'appuie sur 2 tokens: l'un qui repose sur l'autre // deconnexion: lorsque le premier p\u00e9rime, le second est invalide, pas besoin de faire un logout Am\u00e9liorations pr\u00e9vues : admin des associations via api endpoints // \u00e0 voir : refresh de token","title":"About"},{"location":"about/#this-is-the-documentation-for-the-api-made-with-nodejs-lpcodesi","text":"12/03/2022 mkdocs hosted on gh pages: https://omnislashh.github.io/LPCodesiApiRestDoc/ to update, after pushing /docs mkdocs gh-deploy Author - Elie","title":"This is the documentation for the API made with nodejs - LPCODESI"},{"location":"about/#application-programming-interface-restful","text":"definition https://www.redhat.com/en/topics/api/what-is-a-rest-api further reading https://www.redhat.com/en/topics/api/what-are-application-programming-interfaces article en fran\u00e7ais https://practicalprogramming.fr/api-rest un exemple : l'API de wikipedia https://www.mediawiki.org/wiki/API:Main_page cours complet https://openclassrooms.com/fr/courses/6573181-adoptez-les-api-rest-pour-vos-projets-web/6817216-identifiez-les-avantages-d-une-api-rest autre article avec petit historique et contexte https://www.data-transitionnumerique.com/api-rest/","title":"Application Programming Interface RESTful"},{"location":"about/#une-synthese-des-concepts-cles","text":"- client/server separation - stateless pas de sauvegarde de queries server - cache - syst\u00e8me en couche - endpoints accessibles - s\u00e9curis\u00e9 - http protocol - interface uniforme","title":"Une synth\u00e8se des concepts cl\u00e9s :"},{"location":"about/#description","text":"//API REST avec expressjs Administrer des joueurs et des \u00e9quipes repository: https://github.com/omnislashh/ser-cli-app.git outils: Windows10, Wamp, nodejs, expressjs, postman utilisation: CRUD - CREATE, READ, UPDATE, DELETE routing - endpoints uri: /persons /person/:id /data/:options /personcreation /personupdate /persondelete","title":"Description:"},{"location":"about/#endpoints-exemples","text":"personnes: GET http://localhost:3000/persons GET http://localhost:3000/persons/1 GET http://localhost:3000/personsfree PATCH http://localhost:3000/personupdate?id=35&name=updated&prenom=prenomUp&date=1980-05-06 PATCH http://localhost:3000/personupdate?id=2&name=updatedJustName PATCH http://localhost:3000/personupdate?id=2&name=&prenom=updatedJustPrenom PATCH http://localhost:3000/personupdate?id=2&name=&prenom=&date=1980-08-06 PUT http://localhost:3000/personcreation?name=Casillas&prenom=Iker&date=1981-05-20 DELETE http://localhost:3000/persondelete?id=6 departements: GET http://localhost:3000/departements GET http://localhost:3000/departement/1 GET http://localhost:3000/departementsfree PUT http://localhost:3000/departementcreation?nom=France PATCH http://localhost:3000/departementupdate?id=3&nom=Olympique-de-Marseille DELETE http://localhost:3000/departementdelete?id=3","title":"Endpoints exemples:"},{"location":"about/#verbes-http-utilises-et-justifications","text":"PUT plus naturel pour les cr\u00e9ations et mises \u00e0 jour compl\u00e8tes (URI ressource ressource cr\u00e9\u00e9e = URI de la requ\u00eate PUT) PATCH pour les mises \u00e0 jour partielles POST en dernier recours (contrainte \u00e0 la cr\u00e9ation d'une ressource li\u00e9e avec Header Location) codes utilis\u00e9s: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status","title":"Verbes http utilis\u00e9s et justifications :"},{"location":"about/#architecture","text":"MVC - client/server en local","title":"Architecture:"},{"location":"about/#arborescence","text":"","title":"Arborescence:"},{"location":"about/#design-pattern","text":"singleton pour se connecter une seule fois choix design pattern pour Data Access Object: table data getaway design pattern vs active record avantage table data getaway: separe la couche metier de la couche persistante","title":"Design pattern:"},{"location":"about/#notes-additionnelles","text":"// la class Dao implemente le Dal (Data Access Layer) // en javascript (syntaxe : CommonJS) : pas de classe abstraite // classe abstraite definition : // empecher la creation d'objet + lister les methodes qui doivent etre implant\u00e9e + declencher des erreurs // solutions : // 1 - code heroes https://www.codeheroes.fr/2017/11/08/js-classes-abstraites-et-interfaces/ // 2 - babel - pas conseill\u00e9 en prod // 3 - use typescript - bdd: // scripts sql in /data/BDD JWT: POST http://localhost:3000/api/login GET http://localhost:3000/api/me ajout d'une couche de securit\u00e9/connexion user avec le bearer token https://www.wawasensei.dev/tuto/tuto-authentification-refresh-json-web-token-en-nodejs-avec-express // stateless: sans stocker d'infos user // statefull: avec stockage de session // connexion s'appuie sur 2 tokens: l'un qui repose sur l'autre // deconnexion: lorsque le premier p\u00e9rime, le second est invalide, pas besoin de faire un logout","title":"Notes additionnelles :"},{"location":"about/#ameliorations-prevues","text":"admin des associations via api endpoints // \u00e0 voir : refresh de token","title":"Am\u00e9liorations pr\u00e9vues :"}]}